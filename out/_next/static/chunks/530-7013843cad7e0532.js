"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[530],{1568:function(e,n,t){t.d(n,{Z:function(){return a}});var i=t(5893),s=t(7294),o=t(4091),l=()=>{let e=(0,s.useRef)(null);return(0,s.useEffect)(()=>{let n=e.current;if(n){n.innerHTML="";let e=document.createElement("ul");e.id="toc-list";let i=document.querySelector("#post-title"),s=document.querySelectorAll("h1:not(.post-title), h2, h3"),o=document.createElement("p"),l=document.createElement("a");if(i){var t;l.textContent=null!==(t=i.textContent)&&void 0!==t?t:"",l.href="#"+i.id,o.appendChild(l),e.appendChild(o)}s.forEach(n=>{var t;let i=document.createElement("li"),s=document.createElement("a");s.textContent=null!==(t=n.textContent)&&void 0!==t?t:"",s.href="#"+n.id;let o=parseInt(n.tagName.substring(1));i.style.marginLeft=20*(o-1)+"px",i.style.fontSize=16-(o-1)+"px",i.appendChild(s),e.appendChild(i)}),n.appendChild(e)}},[]),(0,i.jsx)("div",{id:"toc-sidebar",ref:e})},r=e=>{let{info:n}=e;return(0,i.jsxs)("div",{className:"blog-header",children:[(0,i.jsx)("h1",{id:"post-title",className:"post-title",children:n.title}),(0,i.jsxs)("p",{className:"blog-item-date",style:{display:"flex",margin:"0",color:"black"},children:["Date: ",n.date," | Tags: ",n.tags.map((e,n)=>(0,i.jsx)("span",{className:"blog-tag",children:e},n))]}),(0,i.jsx)("p",{className:"blog-item-description",style:{color:"gray"},children:n.description})]})},a=e=>{let{blogInfo:n,htmlString:t}=e,[a,c]=(0,s.useState)(!1);return(0,i.jsxs)("div",{className:"two-column-wrapper",children:[(0,i.jsxs)("div",{className:"main-text",children:[(0,i.jsx)("div",{className:"blog-header",children:(0,i.jsx)(r,{info:n})}),(0,i.jsx)("div",{className:"blog-content",children:(0,i.jsx)(o.Z,{htmlString:t,onRendered:()=>{c(!0)}})})]}),a?(0,i.jsx)(l,{}):null]})}},4091:function(e,n,t){var i=t(5893),s=t(7294),o=t(7311),l=t(7951),r=t(6382),a=t(1924),c=t(8310),d=t(9538),h=t(9675);async function p(e){return(await (0,l.l)().use(r.Z,{fragment:!0}).use(a.Z).use(c.Z).use(d.Z).use(h.Z).process(e)).toString()}n.Z=e=>{let{htmlString:n,onRendered:t}=e,[l,r]=(0,s.useState)("");return(0,s.useEffect)(()=>{(async()=>{r(await p(n))})()},[n]),(0,s.useEffect)(()=>{l&&t&&t()},[l,t]),(0,i.jsx)("div",{children:(0,o.ZP)(l)})}},7530:function(e,n,t){t.r(n),t.d(n,{default:function(){return d},info:function(){return c}});var i=t(5893);t(7294);var s=t(7762),o=t(1568),l=t(1151);function r(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h4:"h4",h6:"h6",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/chaoyihu/eeg-attention-fatigue",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/static/v1?label=chaoyihu&message=eeg-attention-fatigue&color=blue&logo=github",alt:"chaoyihu - eeg-attention-fatigue"})})}),"\n",(0,i.jsxs)(n.p,{children:["In this post, I am explaining how I followed ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/extending/extending.html",children:"Python's Documentation"})," to build a C++ extension that can be imported as a Python module for system-level access. Completing this little project allowed me to establish a viable workflow for extending Python with C/C++, and I also ended up producing a nice little tool that provides system-level access in Python scripts."]}),"\n",(0,i.jsx)(n.p,{children:"My post can serve as a quick introduction, providing the essential steps and problem-solving tips. If you're interested, I strongly recommend you to explore the documentation on your own for a more comprehensive understanding."}),"\n",(0,i.jsxs)(n.p,{children:["Source code is available ",(0,i.jsx)(n.a,{href:"https://github.com/chaoyihu/python_x_cpp",children:"here"}),".\nMy main reference is ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/c-api/",children:"Python/C API Reference Manual"}),": Detailed documentation for Python API functions."]}),"\n",(0,i.jsx)(n.h2,{children:"Why Extending Python with C"}),"\n",(0,i.jsxs)(n.p,{children:["If you are like me - a user of data-intensive Python libraries such as ",(0,i.jsx)(n.a,{href:"https://github.com/numpy/numpy",children:"NumPy"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/pytorch/pytorch",children:"PyTorch"}),", and ",(0,i.jsx)(n.a,{href:"https://github.com/pandas-dev/pandas",children:"Pandas"}),", you probably have noticed that these libraries all sit on top substantial C/C++ codebases. This practice of combining Python with C/C++ is very popular among developers, as it provides advantages in several aspects, such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance:"})," Though Python's speed can depend on the context and specific use cases, it is often perceived as slower due to factors such as dynamic typing overhead and its interpreted nature. Therefore, developers may choose C/C++ for tasks that are performance-critical."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parallel Computing:"})," Python's main implementation, CPython, has a ",(0,i.jsx)(n.a,{href:"https://wiki.python.org/moin/GlobalInterpreterLock",children:"GIL"})," limiting its performance in multithreaded scenarios (this statement may be subject to change, see ",(0,i.jsx)("a",{href:"##notes-on-parallel-execution-in-python",children:"discussion here"}),"), while C++ provides powerful features for parallel computing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Low-level System Access:"})," C++ modules are effective in accessing system-level or hardware-level features, making it important for industries like embedded systems development."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Combined Advantages of Ecosystems:"})," This can be demonstrated by an example. Initially developed in C++, ",(0,i.jsx)(n.a,{href:"https://github.com/opencv",children:"OpenCV"})," is a computer vision library highly optimized for real-time applications. Later, ",(0,i.jsx)(n.a,{href:"https://github.com/opencv/opencv-python",children:"opencv-python"})," was created as a wrapper module, exposing an API easily accessible from Python and seamless integrating OpenCV into Python pipelines. It has since become tremendously popular for rapid prototyping of computer vision applications. By combining C++ with Python, developers achieved a balance between performance and ease of development, maximally utilizing strengths of both languages."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"Building a C Extension for Python Using Python API: Step-by-Step"}),"\n",(0,i.jsx)(n.h4,{children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"The goal is to be able to import the extension as a module in Python, pass shell commands as a string parameter, and retrieve the execution output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'>>> import mycli\n>>> mycli.system("free")\n               total        used        free      shared  buff/cache   available\nMem:         7486192     2958584     1086096      200060     3441512     4025260\nSwap:        2097148           0     2097148\n0\n'})}),"\n",(0,i.jsx)(n.h4,{children:"Step 0: Development Environment"}),"\n",(0,i.jsx)(n.p,{children:"Here is what I am working with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"- Python 3.10.12\n- gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\n- Ubuntu 22.04.3 LTS\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Please note!"})})}),"\n",(0,i.jsxs)(n.p,{children:["Building Python C extension using Python API is specific to CPython. If you are developing with alternative Python implementations, please see ",(0,i.jsx)(n.a,{href:"##alternative-solutions-extending-python-using-third-party-tools",children:"this discussion"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{children:"Step 1: Create the C Source File"}),"\n",(0,i.jsxs)(n.p,{children:["Ref: ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/extending/extending.html",children:"Python's Documentation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Make a new folder for your project, and in the folder, create your c source file named ",(0,i.jsx)(n.code,{children:"myclimodule.c"}),". You can use the Python API by adding these two lines to the beginning of your C source file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"##define PY_SSIZE_T_CLEAN\n// Pulls in the python api. Must be included before \n// any standard headers, as it may have pre-processor \n// definitions affecting standard headers.\n##include <Python.h>   \n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Understanding the code"})})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notation explanation"}),": All user-visible symbols defined by Python.h have a prefix of Py or PY, except those defined in standard header files. The full, detailed documentation can be viewed ",(0,i.jsx)(n.a,{href:"ttps://docs.python.org/3/c-api/",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What is PY_SSIZE_T_CLEAN:"})," According to ",(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/issues/102102",children:"ferdnyc's post"}),", the macro PY_SSIZE_T_CLEAN must be defined before the header to ensure backward compatibility in Python's argument parsing functions."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What does Python.h include:"})," ",(0,i.jsx)(n.em,{children:"Python.h"})," defines a set of functions, macros and variables that provide access to most aspects of the Python run-time system. A few commonly used standard header files, ",(0,i.jsx)(n.em,{children:"stdio.h"}),", ",(0,i.jsx)(n.em,{children:"string.h"}),", ",(0,i.jsx)(n.em,{children:"errno.h"}),", and ",(0,i.jsx)(n.em,{children:"stdlib.h"}),", are already included."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Then, we can proceed to write a function that performs the main function - taking shell command as input, executes it, and retrieve the result with exit status. Code as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'/* A C function designed to be used as a Python C extension, \n * providing a way to execute shell commands and retrieve \n * their exit status in a Python script. The command to be \n * executed is passed as a string argument to the function, \n * and the exit status is returned as a Python integer. */\nstatic PyObject *\nmycli_system(PyObject *self, PyObject *args)\n{\n    const char *command;\n    int sts;\n\n    if (!PyArg_ParseTuple(args, "s", &command))\n        return NULL;\n    sts = system(command);   // executes the command and stores the return value\n    return PyLong_FromLong(sts);\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Understanding the code"})})}),"\n",(0,i.jsxs)(n.p,{children:["***static PyObject ",(0,i.jsxs)(n.em,{children:["spam_system(PyObject ",(0,i.jsxs)(n.em,{children:["self, PyObject ",(0,i.jsx)(n.em,{children:"args)"}),":"]})]})," This line declares a C function named mycli_system that takes two parameters: self and args. The self parameter is a reference to the instance of the extension module (but it's not used in this function). The args parameter is a tuple of arguments passed to the function."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Return NULL for error handling:"})," Refer to ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/extending/extending.html##intermezzo-errors-and-exceptions",children:"this"})," for more details."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Next, we need to declare a method, and make it point to this function we just implemented:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'/* The Method Table*/\nstatic PyMethodDef SpamMethods[] = { \n    // ...\n    {   \n        "system",                   /* Name of method*/\n        mycli_system,                /* Pointer to the C implementation*/\n        METH_VARARGS,               /* Flags bits indicating how the call\n                                       should be constructed*/\n        "Execute a shell command."  /* Points to the contents of the docstring*/\n    },  \n    // ...\n    {NULL, NULL, 0, NULL}           /* sentinel */\n};\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Understanding the code"})})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.python.org/3/c-api/structures.html##c.PyMethodDef",children:(0,i.jsx)(n.em,{children:"PyMethodDef"})})," is simply a structure used to describe a method of an extension type."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now we proceed to define the module. The method table we just defined should be referenced in te module definition. Other comments are pretty self-explanatory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'/* The Module Definition*/\nstatic struct PyModuleDef\nmyclimodule = { \n    PyModuleDef_HEAD_INIT,\n    "mycli",     /* Name of module */\n    NULL,        /* module doc, may be null */\n    -1,          /* Size of per-interpreter state of the module\n                    or -1 if the module keeps state in global vars*/\n    SpamMethods  /* The method table must be referenced in \n                    the module definition*/\n};\n'})}),"\n",(0,i.jsx)(n.p,{children:"With the module definition available, we still need to be able to initialize it. So here is the initialization function - the only one so far that is not static:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"/* The Module's Initialization Function*/\n/* Must be named PyInit_name */\nPyMODINIT_FUNC\nPyInit_mycli(void) {\n    return PyModule_Create(&myclimodule);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:['By here, we are actually done with the extension, since this initialization function acts as the entry point to our Python C extension. When we run "import mycli" in a Python script, the Python interpreter will look for, and invoke the ',(0,i.jsx)(n.em,{children:"PyInit_mycli"})," function, which returns a pointer to a new module object given the module definition."]}),"\n",(0,i.jsx)(n.p,{children:"In Python's doc, there is a main function in the example module, which is not directly related to the behavior of the extension when imported in Python. It is responsible for initializing the Python interpreter, setting up configurations, and adding the extension module to the list of built-in modules. It serves specifically as the entry point if you want to compile your C code to a standalone executable."}),"\n",(0,i.jsx)(n.p,{children:"Just to inspect the output and understand what it does, you can add the main function here to your C source file, then use the attached commands to compile and run."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'/* Not directly relevant to Python C Extension. Only as entry point if you\n   compile this C source as standalone executable. */\nint\nmain(int argc, char *argv[])\n{\n    wchar_t *program = Py_DecodeLocale(argv[0], NULL);\n    if (program == NULL) {\n        fprintf(stderr, "Fatal error: cannot decode argv[0]\\n");\n        exit(1);\n    }\n\n    /* Add a built-in module, before Py_Initialize */\n    if (PyImport_AppendInittab("mycli", PyInit_mycli) == -1) {\n        fprintf(stderr, "Error: could not extend in-built modules table\\n");\n        exit(1);\n    }\n\n    /* Pass argv[0] to the Python interpreter */\n    Py_SetProgramName(program);\n\n    /* Initialize the Python interpreter.  Required.\n       If this step fails, it will be a fatal error. */\n    Py_Initialize();\n\n    /* Optionally import the module; alternatively,\n       import can be deferred until the embedded script\n       imports it. */\n    PyObject *pmodule = PyImport_ImportModule("mycli");\n    if (!pmodule) {\n        PyErr_Print();\n        fprintf(stderr, "Error: could not import module \'spam\'\\n");\n    }\n\n    // Get a reference to the "system" function from the module\n    PyObject *pfunction = PyObject_GetAttrString(pmodule, "system");\n\n    // Call the "system" function with the argument "free"\n    PyObject *pargs = PyTuple_Pack(1, PyUnicode_DecodeFSDefault("free"));\n\n    // Retrieve and display the results\n    PyObject *presult = PyObject_CallObject(pfunction, pargs);\n    if (!presult) {\n        PyErr_Print();\n        fprintf(stderr, "Error: calling \'system\' function failed\\n");\n    } else {\n        printf("Result: %ld\\n", PyLong_AsLong(presult));\n    }\n\n    PyMem_RawFree(program);\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ gcc -o build/mycli_standalone myclimodule.c -I /usr/include/python3.10/ -lpython3.10\n$ ./build/mycli_standalone\n"})}),"\n",(0,i.jsx)(n.p,{children:'Output (same as what you\'ll get when executing the "free" command from terminal):'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"               total        used        free      shared  buff/cache   available\nMem:         7486192     4126828     1600080      102772     1759284     2954320\nSwap:        2097148      888576     1208572\nResult: 0\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"NOTES"})})}),"\n",(0,i.jsxs)(n.p,{children:["The main function does not need to be in ",(0,i.jsx)(n.em,{children:"myclimodule.c"})," when compiling the extension in the next step."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{children:"Step 2: Compiling the C Source File and Linking to Python"}),"\n",(0,i.jsx)(n.p,{children:"In this step, we will compile the C extension and make it available for dynamic loading in Python."}),"\n",(0,i.jsx)(n.h6,{children:"Method 1: Using setuptools"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/ext_modules.html",children:"setuptools documentation"})," provides guide on how to build C/C++ extensions."]}),"\n",(0,i.jsxs)(n.p,{children:["I made a new directory called ",(0,i.jsx)(n.em,{children:"packagemycli/"})," and structured it like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"packagemycli\n├── myclimodule.c\n├── pyproject.toml\n└── setup.py\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.em,{children:"pyproject.toml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[build-system]\nrequires = ["setuptools"]\nbuild-backend = "setuptools.build_meta"\n\n[project]\nname="mycli"\nversion="1.0.0"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.em,{children:"setup.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from setuptools import Extension, setup\n\nsetup(\n    ext_modules=[\n        Extension(\n            name="mycli",  ## as it would be imported\n                           ## may include packages/namespaces separated by `.`\n            sources=["myclimodule.c"], ## all sources are compiled into a single binary file\n        ),\n    ]\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you do not have ",(0,i.jsx)(n.em,{children:"build"})," installed, run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ pip install --upgrade build\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now build your distribution using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ python -m build\n"})}),"\n",(0,i.jsx)(n.p,{children:"Hooray! Now your file structure look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"packagemycli\n├── dist\n│\xa0\xa0 ├── mycli-1.0.0-cp310-cp310-linux_x86_64.whl\n│\xa0\xa0 └── mycli-1.0.0.tar.gz\n├── mycli.egg-info\n│\xa0\xa0 ├── dependency_links.txt\n│\xa0\xa0 ├── PKG-INFO\n│\xa0\xa0 ├── SOURCES.txt\n│\xa0\xa0 └── top_level.txt\n├── myclimodule.c\n├── pyproject.toml\n└── setup.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"Install your distribution, and you can import and use it in Python scripts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ pip install dist/mycli-1.0.0-cp310-cp310-linux_x86_64.whl\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'>>> import mycli\n>>> mycli.system("echo hello")\nhello\n0\n'})}),"\n",(0,i.jsx)(n.h6,{children:"Method 2: Using gcc"}),"\n",(0,i.jsx)(n.p,{children:"Instead of using setuptools, I simply compiled it as a .so file using gcc and linked it to Python. Running the following commands worked fine for me:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ sudo apt install python-dev-is-python3\n$ export PYTHONPATH=./build:$PYTHONPATH\n$ export CPATH=<path to python include>:$CPATH\n$ gcc -fPIC --shared -o build/mycli.so myclimodule.c\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"NOTES"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Path to python include can be found using:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'>>> from sysconfig import get_paths\n>>> info = get_paths()\n>>> print(info["include"])\n/usr/include/python3.10\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The .so filename should be the same as the module name used for import."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You can also run ",(0,i.jsx)(n.code,{children:"gcc -fPIC --shared -o build/mycli_standalone.so myclimodule.c -I /usr/include/python3.10/"}),", specifying the directory where Python header files are located without adding the python include directory to $CPATH."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is how I arrived at it. First, I tried compiling using a quite straightforward command but failed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ gcc --shared -o build/myclimodule.so myclimodule.c \nmyclimodule.c:6:10: fatal error: Python.h: No such file or directory\n    6 | ##include <Python.h>\n      |          ^~~~~~~~~~\ncompilation terminated.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Referring to ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory",children:"this post"}),", I installed python dev and tried again, but the problem persists. C still cannot find the Python extension header. So I located ",(0,i.jsx)(n.em,{children:"Python.h"})," and manually added it to CPATH. Now I get a different error:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ sudo apt install python-dev-is-python3\n$ gcc --shared -o build/myclimodule.so myclimodule.c \nmyclimodule.c:6:10: fatal error: Python.h: No such file or directory\n    6 | ##include <Python.h>\n      |          ^~~~~~~~~~\n$ export CPATH=/usr/include/python3.10/:$CPATH\n$ gcc --shared -o build/myclimodule.so myclimodule.c \n/usr/bin/ld: /tmp/ccbB6QA9.o: warning: relocation against `PyInit_mycli' in read-only section `.text'\n/usr/bin/ld: /tmp/ccbB6QA9.o: relocation R_X86_64_PC32 against symbol `stderr@@GLIBC_2.2.5' can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: bad value\ncollect2: error: ld returned 1 exit status\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The error messages explicitly tells me to recompile using ",(0,i.jsx)(n.em,{children:"-fPIC"}),". So I compiled again with this option. This time the compilation completed, but when I went ahead to import the module in Python, Python cannot find the module:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ gcc -fPIC --shared -o build/myclimodule.so myclimodule.c\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:">>> import mycli\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'mycli'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Two important tips from the ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/extending/building.html##building",children:"doc"}),": First, the shared library must be available on PYTHONPATH to be importable. Second, make sure to name the .so file the same way used for import. So I added the build path to PYTHONPATH, and compiled the file again to ",(0,i.jsx)(n.em,{children:"mycli.so"})," instead of ",(0,i.jsx)(n.em,{children:"myclimodule.so"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ export PYTHONPATH=./build:$PYTHONPATH\n$ echo $PYTHONPATH\n./build:\n$ gcc -fPIC --shared -o build/mycli.so myclimodule.c\n"})}),"\n",(0,i.jsx)(n.p,{children:"It worked!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'>>> import mycli\n>>> mycli.system("ls -a")\n.  ..  build  .git  main.py  myclimodule.c  README.md\n0\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Discussions"}),"\n",(0,i.jsx)(n.h4,{children:"Other Solutions: Extending Python using Third-party Tools"}),"\n",(0,i.jsxs)(n.p,{children:["Other solutions are available to extend Python with C. Listed below are a few of them provided in ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/extending/index.html",children:"doc"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/ctypes.html##module-ctypes",children:"ctypes"})," and ",(0,i.jsx)(n.a,{href:"https://cffi.readthedocs.io/en/stable/",children:"cffi"})," are foreign function libraries you can use in cases of calling C library functions or making system calls."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://cython.org/",children:"Cython"})," is a programming language that makes it easy to write C extensions for Python. Cython code looks similar to Python, but it includes additional syntax that allow for C-like features. Here is a minimum example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"## example.pyx\n## This is some Cython code\ndef square(int x):\n    return x * x\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"## main.py\nimport example\nprint(example.square(3))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'## setup.py\nfrom setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    ext_modules=cythonize("example.pyx"),\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"## compile.sh\npython setup.py build_ext --inplace\n"})}),"\n",(0,i.jsx)(n.p,{children:"Build and run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ source compile.sh\n$ python main.py \n9\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.swig.org/",children:"SWIG"})," is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://numba.pydata.org/",children:"Numba"})," is a Just-in-time compiler that translates a subset of Python and NumPy code into fast machine code. No separate compilation is needed - it can be as simple as importing Numba as a library and applying decorators to your Python functions."]}),"\n",(0,i.jsxs)(n.p,{children:["A few useful posts I came across such as  ",(0,i.jsx)(n.a,{href:"https://realpython.com/python-bindings-overview/##other-solutions",children:"Python Bindings: Calling C or C++ From Python - Real Python"})," and ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/visualstudio/python/working-with-c-cpp-python-in-visual-studio?view=vs-2022",children:"Create a C++ extension for Python - Microsoft Learn"})," introduced some other ways to create Python bindings, including PyBind, SIP, PyBindgen, etc."]}),"\n",(0,i.jsxs)(n.p,{children:["Plus, if you are interested, the ",(0,i.jsx)(n.a,{href:"https://packaging.python.org/en/latest/guides/packaging-binary-extensions/",children:"Python Packaging User Guide: Binary Extensions"})," covers several available tools that simplify the creation of binary extensions."]}),"\n",(0,i.jsx)(n.h4,{children:"Notes on parallel execution in Python"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The multiprocessing Python library:"})," While the ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/multiprocessing.html",children:"multiprocessing"})," library is a valuable tool for achieving parallelism in Python, it's worth noting that using it comes with some overhead, as processes need to be created and communication between them involves serialization and deserialization of data. In contrast, C++ provides native support for multithreading and parallelism through features like threads, mutexes, and parallel algorithms in the Standard Template Library (STL). This allows for more fine-grained control over shared data and can be more lightweight."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The no-GIL Python:"})," In July 2023, the Python team ",(0,i.jsx)(n.a,{href:"https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474",children:"officially accepted"})," the proposal of making the GIL optional in CPython. ",(0,i.jsx)(n.a,{href:"https://github.com/colesbury/nogil",children:"Proof of Concept"})," for no-GIL Python has also been made available. However, the team will only commit to switching entirely to the no-GIL build when they are confident that there is community support to make production use of no-GIL viable. Besides, having no-GIL build as the default will take time."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{children:"Cross-platform development"}),"\n",(0,i.jsxs)(n.p,{children:["C++ is often used for writing platform-specific code, especially when developing cross-platform applications. Python libraries that rely on C++ codebases usually release builds for different platforms, see ",(0,i.jsx)(n.a,{href:"https://pypi.org/project/numpy/##files",children:"numpy's release page"})," for example."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are interested, there are discussions like ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/64261360/how-are-pythons-c-and-c-libraries-cross-platform",children:"this one"})," and ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/8721918/how-do-you-compile-python-c-c-extensions-for-different-os-versions-of-python",children:"this one"})," explaining how developers compile their code for multiple platforms."]}),"\n",(0,i.jsx)(n.h2,{children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"To summarize, this post:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Explained the motivations for extending Python with C."}),"\n",(0,i.jsx)(n.li,{children:"Went through my steps of building a Python C extension using Python API, from creating the C source file to compiling it using setuptools and gcc respectively, resulting in a custom C extension dynamically loaded to Python for shell command execution."}),"\n",(0,i.jsx)(n.li,{children:"Included a brief discussion on alternative solutions you can use to extend Python with C."}),"\n",(0,i.jsx)(n.li,{children:"Attached notes to expand on some topics mentioned in the post."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Thanks for reading! I would be delighted if you found this post useful or interesting. See you in the next one (^_^)/"})]})}let a=s.renderToString((0,i.jsx)(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)},{})),c={title:"Build a C Extension for Python using Python API on Linux",date:"2024-01-21",tags:["Python","C/C++"],description:"Explaining how I followed Python's Doc to build a Python C extension \n    using Python API, which can be imported as a library to run shell commands in Python \n    scripts."};function d(){return(0,i.jsx)(o.Z,{blogInfo:c,htmlString:a})}}}]);