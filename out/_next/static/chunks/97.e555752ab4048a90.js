"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[97],{1568:function(e,n,t){t.d(n,{Z:function(){return l}});var i=t(5893),r=t(7294),o=t(4091),s=()=>{let e=(0,r.useRef)(null);return(0,r.useEffect)(()=>{let n=e.current;if(n){n.innerHTML="";let e=document.createElement("ul");e.id="toc-list";let i=document.querySelector("#post-title"),r=document.querySelectorAll("h1:not(.post-title), h2, h3"),o=document.createElement("p"),s=document.createElement("a");if(i){var t;s.textContent=null!==(t=i.textContent)&&void 0!==t?t:"",s.href="#"+i.id,o.appendChild(s),e.appendChild(o)}r.forEach(n=>{var t;let i=document.createElement("li"),r=document.createElement("a");r.textContent=null!==(t=n.textContent)&&void 0!==t?t:"",r.href="#"+n.id;let o=parseInt(n.tagName.substring(1));i.style.marginLeft=20*(o-1)+"px",i.style.fontSize=16-(o-1)+"px",i.appendChild(r),e.appendChild(i)}),n.appendChild(e)}},[]),(0,i.jsx)("div",{id:"toc-sidebar",ref:e})},c=e=>{let{info:n}=e;return(0,i.jsxs)("div",{className:"blog-header",children:[(0,i.jsx)("h1",{id:"post-title",className:"post-title",children:n.title}),(0,i.jsxs)("p",{className:"blog-item-date",style:{display:"flex",margin:"0",color:"black"},children:["Date: ",n.date," | Tags: ",n.tags.map((e,n)=>(0,i.jsx)("span",{className:"blog-tag",children:e},n))]}),(0,i.jsx)("p",{className:"blog-item-description",style:{color:"gray"},children:n.description})]})},l=e=>{let{blogInfo:n,htmlString:t}=e,[l,a]=(0,r.useState)(!1);return(0,i.jsxs)("div",{className:"two-column-wrapper",children:[(0,i.jsxs)("div",{className:"main-text",children:[(0,i.jsx)("div",{className:"blog-header",children:(0,i.jsx)(c,{info:n})}),(0,i.jsx)("div",{className:"blog-content",children:(0,i.jsx)(o.Z,{htmlString:t,onRendered:()=>{a(!0)}})})]}),l?(0,i.jsx)(s,{}):null]})}},4091:function(e,n,t){var i=t(5893),r=t(7294),o=t(7311),s=t(7951),c=t(6382),l=t(1924),a=t(8310),d=t(9538),h=t(9675);async function u(e){return(await (0,s.l)().use(c.Z,{fragment:!0}).use(l.Z).use(a.Z).use(d.Z).use(h.Z).process(e)).toString()}n.Z=e=>{let{htmlString:n,onRendered:t}=e,[s,c]=(0,r.useState)("");return(0,r.useEffect)(()=>{(async()=>{c(await u(n))})()},[n]),(0,r.useEffect)(()=>{s&&t&&t()},[s,t]),(0,i.jsx)("div",{children:(0,o.ZP)(s)})}},2097:function(e,n,t){t.r(n),t.d(n,{default:function(){return d},info:function(){return a}});var i=t(5893);t(7294);var r=t(7762),o=t(1568),s=t(1151);function c(e){let n={blockquote:"blockquote",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:["\n",(0,i.jsx)(n.h1,{children:"The problem"}),"\n",(0,i.jsx)(n.p,{children:"I was working on some code changes on my fork. I made a commit A from CLI containing my local changes, and accepted code review suggestions in commit B."}),"\n",(0,i.jsx)(n.p,{children:"My work is not finished yet, so what I should have done next was to pull the revised code and continue to work on it. However, at this point, I synced fork by mistake, resulting in an unwanted merge commit D."}),"\n",(0,i.jsx)(n.p,{children:"Here is what the log tree looks like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"                  (...)\n     D is a         |    Other developers\n     premature  D   E    are actively\n     merge      |\\  |    working here\n                | \\ |\n                |  \\|\n                B   C\n                |   |\n                |   | \n                A   |\n                 \\  |\n        bugfix    \\ |     dev\n                   \\|\n                    O\n"})}),"\n",(0,i.jsx)(n.p,{children:"I need to undo the premature merge to avoid potential conflicts caused by changes in commit C that got mixed into my bugfix branch."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stash, commit, or save any local changes you want to keep in a temporary branch before trying any fixes."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{children:"The fix"}),"\n",(0,i.jsx)(n.p,{children:"Following illustrations show an excerpt of the relevant part of the log tree."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Checkout the bugfix branch"}),"\n",(0,i.jsxs)(n.p,{children:["Effects: This will switch to the ",(0,i.jsx)(n.code,{children:"bugfix"})," branch by updating the index and the files in the working tree, and by pointing HEAD at the ",(0,i.jsx)(n.code,{children:"bugfix"})," branch head."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git checkout bugfix\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"*   commit D (origin/bugfix)\n|\\  Merge: B C\n| | Author: My GitHub Account\n| |     A merge performed by GitHub when I synced fork.\n| |   \n| * commit C (origin/main, origin/HEAD)\n| | Author: DeveloperA\n| |\n* | commit B\n| | Author: My GitHub Account\n| |     Accepted code review suggestions from remote.\n| |   \n* | commit A (HEAD -> bugfix)\n|/  Author: Me\n|       Some changes made from CLI.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Hard reset to commit B"}),"\n",(0,i.jsxs)(n.p,{children:["Effects: This resets the ",(0,i.jsx)(n.code,{children:"bugfix"})," branch head and HEAD to commit B. The index and working tree are reset. Any changes to tracked files in the working tree since commit B are discarded. Any untracked files or directories in the way of writing any tracked files are simply deleted."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git reset --hard <commit B>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"*   commit D (origin/bugfix)\n|\\  Merge: B C\n| | Author: My GitHub Account\n| |     A merge performed by GitHub when I synced fork.\n| |   \n| * commit C (origin/main, origin/HEAD)\n| | Author: DeveloperA\n| |\n* | commit B (HEAD -> bugfix)\n| | Author: My GitHub Account\n| |     Accepted code review suggestions from remote.\n| |   \n* | commit A\n|/  Author: Me\n|       Some changes made from CLI.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Force push to the bugfix branch"}),"\n",(0,i.jsxs)(n.p,{children:["Effects: This will cause history to be modified on local and remote. Commit D is now a dangling commit, still existing but unreferenced. If commit D ever needs to be retrieved, try ",(0,i.jsx)(n.code,{children:"git reflog"})," before it is garbage collected - though a hard reset should not have been performed in the first place if the work was meant to be kept."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How does force push affect other developers?"})}),"\n",(0,i.jsx)(n.p,{children:"This is always a question to think about before executing any git commands."}),"\n",(0,i.jsxs)(n.p,{children:["The force push will not cause conflict in this case, because no other developers have pulled changes from the ",(0,i.jsx)(n.code,{children:"origin/bugfix"})," since commit B."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git push -f origin bugfix\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"* commit B (HEAD -> bugfix, origin/bugfix)\n| Author: My GitHub Account\n|     Accepted code review suggestions from remote.\n|     \n* commit A\n| Author: Me\n|     Some changes made from CLI.\n|\n| * commit C (origin/main, origin/HEAD)\n|/  Author: DeveloperA\n|\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now the premature merge has been undone, and I can keep working on ",(0,i.jsx)(n.code,{children:"bugfix"})," branch until the fix is completed."]}),"\n",(0,i.jsx)(n.p,{children:"ʕ•́ᴥ•̀ʔっ Thanks for reading!"})]})}let l=r.renderToString((0,i.jsx)(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)},{})),a={title:"Resetting an Unwanted Merge Commit in Git",date:"2024-03-05",tags:["Git"],description:"This post documents a quick solution to reset a commit."};function d(){return(0,i.jsx)(o.Z,{blogInfo:a,htmlString:l})}}}]);