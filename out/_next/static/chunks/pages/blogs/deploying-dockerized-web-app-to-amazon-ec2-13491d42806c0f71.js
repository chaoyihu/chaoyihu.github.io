(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[185,174],{6981:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blogs/deploying-dockerized-web-app-to-amazon-ec2",function(){return s(174)}])},1568:function(e,n,s){"use strict";s.d(n,{Z:function(){return r}});var t=s(5893),a=s(7294),o=s(4091),i=()=>{let e=(0,a.useRef)(null);return(0,a.useEffect)(()=>{let n=e.current;if(n){n.innerHTML="";let e=document.createElement("ul");e.id="toc-list";let t=document.querySelector("#post-title"),a=document.querySelectorAll("h1:not(.post-title), h2, h3"),o=document.createElement("p"),i=document.createElement("a");if(t){var s;i.textContent=null!==(s=t.textContent)&&void 0!==s?s:"",i.href="#"+t.id,o.appendChild(i),e.appendChild(o)}a.forEach(n=>{var s;let t=document.createElement("li"),a=document.createElement("a");a.textContent=null!==(s=n.textContent)&&void 0!==s?s:"",a.href="#"+n.id;let o=parseInt(n.tagName.substring(1));t.style.marginLeft=20*(o-1)+"px",t.style.fontSize=16-(o-1)+"px",t.appendChild(a),e.appendChild(t)}),n.appendChild(e)}},[]),(0,t.jsx)("div",{id:"toc-sidebar",ref:e})},c=e=>{let{info:n}=e;return(0,t.jsxs)("div",{className:"blog-header",children:[(0,t.jsx)("h1",{id:"post-title",className:"post-title",children:n.title}),(0,t.jsxs)("p",{className:"blog-item-date",style:{display:"flex",margin:"0",color:"black"},children:["Date: ",n.date," | Tags: ",n.tags.map((e,n)=>(0,t.jsx)("span",{className:"blog-tag",children:e},n))]}),(0,t.jsx)("p",{className:"blog-item-description",style:{color:"gray"},children:n.description})]})},r=e=>{let{blogInfo:n,htmlString:s}=e,[r,l]=(0,a.useState)(!1);return(0,t.jsxs)("div",{className:"two-column-wrapper",children:[(0,t.jsxs)("div",{className:"main-text",children:[(0,t.jsx)("div",{className:"blog-header",children:(0,t.jsx)(c,{info:n})}),(0,t.jsx)("div",{className:"blog-content",children:(0,t.jsx)(o.Z,{htmlString:s,onRendered:()=>{l(!0)}})})]}),r?(0,t.jsx)(i,{}):null]})}},4091:function(e,n,s){"use strict";var t=s(5893),a=s(7294),o=s(7311),i=s(7951),c=s(6382),r=s(1924),l=s(8310),d=s(9538),h=s(9675);async function u(e){return(await (0,i.l)().use(c.Z,{fragment:!0}).use(r.Z).use(l.Z).use(d.Z).use(h.Z).process(e)).toString()}n.Z=e=>{let{htmlString:n,onRendered:s}=e,[i,c]=(0,a.useState)("");return(0,a.useEffect)(()=>{(async()=>{c(await u(n))})()},[n]),(0,a.useEffect)(()=>{i&&s&&s()},[i,s]),(0,t.jsx)("div",{children:(0,o.ZP)(i)})}},174:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return d},info:function(){return l}});var t=s(5893);s(7294);var a=s(7762),o=s(1568),i=s(1151);function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:["\n",(0,t.jsx)(n.p,{children:"This post documents the steps I took to deploy my web app to an Amazon EC2 instance with docker compose."}),"\n",(0,t.jsx)(n.h1,{children:"Steps"}),"\n",(0,t.jsxs)(n.p,{children:["In this section, I referred mainly to ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html",children:"the AWS documentation"})," and this tutorial: ",(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=gRgdnHHuvoI",children:"How to run docker-compose on EC2 AWS"}),"."]}),"\n",(0,t.jsx)(n.h2,{children:"Create a EC2 instance"}),"\n",(0,t.jsx)(n.p,{children:"First, I logged in to AWS console and navigated to the EC2 dashboard to started a new instance."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For type of the new instance, I chose ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/ec2/instance-types/t2/#:~:text=%240.002-,t2.micro,-1",children:"t2.micro"})," with ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/linux/amazon-linux-2023/faqs/",children:"Amazon Linux 2023"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"As prompted, I created a new ssh keypair and the .pem file was automatically downloaded upon creation."}),"\n",(0,t.jsx)(n.li,{children:"In security group, I allowed ssh, https and http."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"I pasted following script in Advanced - User data. The script here will be run by root user automatically once the instance is launched to install docker, docker compose and grant necessary access to non-root users."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"#!/bin/bash\nset -x\nyum update -y\n#install docker\nyum install docker`\nservice docker start\nsystemctl enable docker\n#allow docker to run as non-root user\nusermod -a -G docker ec2-user\nchmod 666 /var/run/docker.sock\n#install docker compose\ncurl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Quote"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Scripts entered as user data are run as the root user, so do not use the sudo command in the script."'}),"\n",(0,t.jsx)(n.li,{children:'"Remember that any files you create will be owned by the root user; if you need a non-root user to have file access, you should modify the permissions accordingly in the script."'}),"\n",(0,t.jsx)(n.li,{children:'"The script is not run interactively, so you cannot include commands that require user feedback (such as yum update without the -y flag)."'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details, refer to ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html",children:"Run commands on your Linux instance at launch"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["And here is a quick tip on ",(0,t.jsx)(n.a,{href:"https://gist.github.com/npearce/6f3c7826c7499587f00957fee62f8ee9",children:"installation commands on different Amazon Machine Image (AMI) versions"})," in case any of the install commands does not work."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"SSH into the instance"}),"\n",(0,t.jsx)(n.p,{children:"After launching the instance, it should be visible from the dashboard. Now click on the instance to find its public IP address, then open a local terminal and do the following to ssh into the instance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ chmod 0400 PEM_FILE.pem\n$ ssh -i PEM_FILE.pem  ec2-user@the.public.ip.address\n[ec2-user@ip-private ~]$ \n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE"}),"\nIf you do not change permissions on the pem file, which was automatically downloaded when you created the key pair, the following error will be raised:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0664 for 'keyname.pem' are too open.\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"keyname.pem\": bad permissions\n"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Check docker and docker compose to make sure they are installed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"[ec2-user@ip-private ~]$ whoami\nec2-user\n[ec2-user@ip-private ~]$ docker -v\nDocker version 20.10.25, build b82b9f3\n[ec2-user@ip-private ~]$ docker-compose -v\nDocker Compose version v2.24.5\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Mount a data volume"}),"\n",(0,t.jsxs)(n.p,{children:["According to ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",children:"Amazon EC2 instance root volume - Root volume type"}),", root volumes behave when ba Amazon EBS-backed instances and Instance store-backed instances, which behaves differently in case of a instance failure: basically, data persists on EBS volumes until you delete the volume while instance store disks get erased when the instance shuts down. This ",(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/74678898/what-does-ec2-store-and-why-does-it-even-need-a-storage-solution-like-ebs-or-ins",children:"discussion on Stack Overflow"})," provides an accessible explanation."]}),"\n",(0,t.jsxs)(n.p,{children:["In my case, a ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",children:"root volume"})," was automatically created when I launched the instance. I viewed the attached volume by visiting the storage tab under EC2 > Instances > instance_id, and confirmed that the root device type for the volume is EBS, which means the session can be restored in case of a instance failure, so I feel comfortable running my server without mounting an extra volume."]}),"\n",(0,t.jsx)(n.p,{children:"But in case extra volumes need to be added, following is what to do:"}),"\n",(0,t.jsx)(n.p,{children:"Go to AWS EC2 console, find volume on sidebar. Create a volume - use same availability zone as the instance and attach it to the instance."}),"\n",(0,t.jsx)(n.p,{children:"View the volumes to find the name of the volume you just created:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ lsblk\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then format the volume using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ mkfs -t xfs /dev/volumename\n"})}),"\n",(0,t.jsx)(n.p,{children:"Finally, make a directory as your mountpoint and mount the volume there:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ mkdir /data\n$ mount /dev/volumename /data\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ref: ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/step2-make-data-volume-available.html",children:"Make the data volume available"})]}),"\n",(0,t.jsx)(n.h2,{children:"Run the application"}),"\n",(0,t.jsx)(n.p,{children:"The application is managed by Docker Compose. This is the project structure on my local machine:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"project\n├── compose.yaml\n├── README.md\n├── redis\n│\xa0\xa0 └── Dockerfile\n└── web\n    ├── Dockerfile\n    ├── handlers/\n    ├── requirements.txt\n    ├── server.py\n    ├── static/\n    ├── templates/\n    └── utils/\n"})}),"\n",(0,t.jsx)(n.p,{children:"Two services are included in this application: web and redis. Web is the server application, I built it as a docker image and pushed it to registry. And for redis, the official docker image is used with default configurations (exposing port 6379). I had a Dockerfile for redis but it's actually not necessary unless custom configurations are added - in that case redis needs to be built as a custom image as well."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Attaching the commands here for documentation purposes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ docker login\n$ docker build -t dockeraccountname/dockerimagename:tag web/\n$ docker push dockeraccountname/dockerimagename:tag\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Replace ",(0,t.jsx)(n.code,{children:"dockeraccountname/dockerimagename:tag"})," in use."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Following is what I wrote in compose.yaml."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# compose.yaml\nversion: \'3.9\'\n  \nservices:\n  redis:\n    image: "redis:alpine"\n    build: ./redis\n  web:\n    image: "dockeraccountname/dockerimagename:tag"\n    build: ./web\n    ports:\n      - 443:443\n    secrets:\n      - ssl_certfile\n      - ssl_keyfile\n\nsecrets:\n  ssl_certfile:\n    file: /etc/ssl/certs/test.crt\n  ssl_keyfile:\n    file: /etc/ssl/certs/test.key\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Since all the docker images used in this application are now available in the registry, compose.yaml is the only file needed to be transferred to the EC2 instance. The commands below copies necessary files into the instance by running ",(0,t.jsx)(n.code,{children:"scp"})," in the local terminal, with ",(0,t.jsx)(n.code,{children:"-i"})," specifying the key to use for this operation, and ",(0,t.jsx)(n.code,{children:"-r"})," mapping local file location to the directory it mounts to on the instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ scp -i ~/.ssh/yourkey.pem -r ~/project/compose.yaml ec2-user@public-ip:compose.yaml\n$ scp -i ~/.ssh/yourkey.pem -r /etc/ssl/certs/test* ec2-user@public-ip:\n"})}),"\n",(0,t.jsx)(n.p,{children:"And in the ssh terminal:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"[ec2-user@ip-private ~]$ sudo mv test.* /etc/ssl/certs/\n"})}),"\n",(0,t.jsx)(n.p,{children:"Finally, run the app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"[ec2-user@ip-private ~]$ docker-compose -f compose.yaml up -d\n"})}),"\n",(0,t.jsx)(n.p,{children:"Done! Visit https://public-ip to access the server running on the instance, and the application is running as expected."}),"\n",(0,t.jsx)(n.h2,{children:"Set AWS Cost Alert and Budget"}),"\n",(0,t.jsxs)(n.p,{children:["As an additional step to avoid unexpected expenses, I set a billing alert and budget following documentation on ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html",children:"Creating a budget"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The process is straight-forward. I only had a permission issue with the IAM role assumed to perform the action of stopping the instance when exceeding budget, and solved it by adding a ststement to the policy of trusted relationship suggested in ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html",children:"this stack overflow discussion"}),"."]}),"\n",(0,t.jsx)(n.h1,{children:"To-Do"}),"\n",(0,t.jsx)(n.p,{children:"The web application is running fine now on the instance! I am simply using the public IP of the instance to access the application, and the ssl certs are still self-signed, but this is only temporary. Following steps may be completed and documented in a future post:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get a CA-signed SSL/TLS certificate to replace the self-signed certificate."}),"\n",(0,t.jsx)(n.li,{children:"Set up Elastic IP for the instance."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Thanks for reading! (•◡•)/"})]})}let r=a.renderToString((0,t.jsx)(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)},{})),l={title:"Running Web App on Amazon EC2 with Docker Compose",date:"2024-02-10",tags:["AWS","Amazon EC2","Docker"],description:"Deploying a web application managed by docker compose to an Amazon EC2 Instance."};function d(){return(0,t.jsx)(o.Z,{blogInfo:l,htmlString:r})}}},function(e){e.O(0,[774,644,888,179],function(){return e(e.s=6981)}),_N_E=e.O()}]);