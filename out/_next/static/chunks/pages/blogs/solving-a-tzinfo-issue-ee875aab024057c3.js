(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[49,685],{2748:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blogs/solving-a-tzinfo-issue",function(){return t(2685)}])},1568:function(n,e,t){"use strict";t.d(e,{Z:function(){return c}});var o=t(5893),i=t(7294),r=t(4091),a=()=>{let n=(0,i.useRef)(null);return(0,i.useEffect)(()=>{let e=n.current;if(e){e.innerHTML="";let n=document.createElement("ul");n.id="toc-list";let o=document.querySelector("#post-title"),i=document.querySelectorAll("h1:not(.post-title), h2, h3"),r=document.createElement("p"),a=document.createElement("a");if(o){var t;a.textContent=null!==(t=o.textContent)&&void 0!==t?t:"",a.href="#"+o.id,r.appendChild(a),n.appendChild(r)}i.forEach(e=>{var t;let o=document.createElement("li"),i=document.createElement("a");i.textContent=null!==(t=e.textContent)&&void 0!==t?t:"",i.href="#"+e.id;let r=parseInt(e.tagName.substring(1));o.style.marginLeft=20*(r-1)+"px",o.style.fontSize=16-(r-1)+"px",o.appendChild(i),n.appendChild(o)}),e.appendChild(n)}},[]),(0,o.jsx)("div",{id:"toc-sidebar",ref:n})},s=n=>{let{info:e}=n;return(0,o.jsxs)("div",{className:"blog-header",children:[(0,o.jsx)("h1",{id:"post-title",className:"post-title",children:e.title}),(0,o.jsxs)("p",{className:"blog-item-date",style:{display:"flex",margin:"0",color:"black"},children:["Date: ",e.date," | Tags: ",e.tags.map((n,e)=>(0,o.jsx)("span",{className:"blog-tag",children:n},e))]}),(0,o.jsx)("p",{className:"blog-item-description",style:{color:"gray"},children:e.description})]})},c=n=>{let{blogInfo:e,htmlString:t}=n,[c,f]=(0,i.useState)(!1);return(0,o.jsxs)("div",{className:"two-column-wrapper",children:[(0,o.jsxs)("div",{className:"main-text",children:[(0,o.jsx)("div",{className:"blog-header",children:(0,o.jsx)(s,{info:e})}),(0,o.jsx)("div",{className:"blog-content",children:(0,o.jsx)(r.Z,{htmlString:t,onRendered:()=>{f(!0)}})})]}),c?(0,o.jsx)(a,{}):null]})}},4091:function(n,e,t){"use strict";var o=t(5893),i=t(7294),r=t(7311),a=t(7951),s=t(6382),c=t(1924),f=t(8310),l=t(9538),h=t(9675);async function d(n){return(await (0,a.l)().use(s.Z,{fragment:!0}).use(c.Z).use(f.Z).use(l.Z).use(h.Z).process(n)).toString()}e.Z=n=>{let{htmlString:e,onRendered:t}=n,[a,s]=(0,i.useState)("");return(0,i.useEffect)(()=>{(async()=>{s(await d(e))})()},[e]),(0,i.useEffect)(()=>{a&&t&&t()},[a,t]),(0,o.jsx)("div",{children:(0,r.ZP)(a)})}},2685:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l},info:function(){return f}});var o=t(5893);t(7294);var i=t(7762),r=t(1568),a=t(1151);function s(n){let e={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:["\n",(0,o.jsxs)(e.p,{children:["The debugging here is related to ",(0,o.jsx)(e.a,{href:"https://github.com/python/cpython/issues/116676",children:"this issue in the cpython repo"}),"/"]}),"\n",(0,o.jsx)(e.h1,{children:"Describe the issue"}),"\n",(0,o.jsx)(e.p,{children:'When attempting to change system timezone config in a Docker container by running a build-time copy command from /usr/share/zoneinfo/Asia/Shanghai to /etc/localtime, zoneinfo.ZoneInfo("UTC").utcoffset() gives the wrong result.'}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Reproduce:"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"script.py"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import zoneinfo\nimport datetime\nprint("UTC", str(zoneinfo.ZoneInfo("UTC").utcoffset(datetime.datetime(2024, 3, 12, 0, 0, 0, 0))))\nprint("Asia/Shanghai", str(zoneinfo.ZoneInfo("Asia/Shanghai").utcoffset(datetime.datetime(2024, 3, 12, 0, 0, 0, 0))))\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"Dockerfile"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'FROM python:3.10-slim\nRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\nCOPY . .\nCMD ["sh", "-c", "python script.py"]\n'})}),"\n",(0,o.jsx)(e.p,{children:"Expected output:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"UTC 0:00:00\nAsia/Shanghai 8:00:00\n"})}),"\n",(0,o.jsx)(e.p,{children:"Actual output:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"UTC 8:00:00\nAsia/Shanghai 8:00:00\n"})}),"\n",(0,o.jsx)(e.h1,{children:"Tracing"}),"\n",(0,o.jsxs)(e.p,{children:["The behavior of ",(0,o.jsx)(e.code,{children:"ZoneInfo(key)"})," is documented in ",(0,o.jsx)(e.code,{children:"zoneinfo.rst"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-m",children:"When ``ZoneInfo(key)`` is called, the constructor first searches the\ndirectories specified in :data:`TZPATH` for a file matching ``key``, and on\nfailure looks for a match in the tzdata package. This behavior can be\nconfigured in three ways:\n\n1. The default :data:`TZPATH` when not otherwise specified can be configured at\n   :ref:`compile time <zoneinfo_data_compile_time_config>`.\n2. :data:`TZPATH` can be configured using :ref:`an environment variable\n   <zoneinfo_data_environment_var>`.\n3. At :ref:`runtime <zoneinfo_data_runtime_config>`, the search path can be\n   manipulated using the :func:`reset_tzpath` function.\n\n.. _zoneinfo_data_compile_time_config:\n\nGlobals\n-------\n\n.. data:: TZPATH\n\n    A read-only sequence representing the time zone search path -- when\n    constructing a ``ZoneInfo`` from a key, the key is joined to each entry in\n    the ``TZPATH``, and the first file found is used.\n\n    ``TZPATH`` may contain only absolute paths, never relative paths,\n    regardless of how it is configured.\n\n    The object that ``zoneinfo.TZPATH`` points to may change in response to a\n    call to :func:`reset_tzpath`, so it is recommended to use\n    ``zoneinfo.TZPATH`` rather than importing ``TZPATH`` from ``zoneinfo`` or\n    assigning a long-lived variable to ``zoneinfo.TZPATH``.\n\n    For more information on configuring the time zone search path, see\n    :ref:`zoneinfo_data_configuration`.\n"})}),"\n",(0,o.jsxs)(e.p,{children:["In ",(0,o.jsx)(e.code,{children:"configure.ac"}),", we find the search path for zoneinfo binary files, ",(0,o.jsx)(e.code,{children:"TZPATH"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-m",children:'TZPATH="/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/zoneinfo"\n...\n'})}),"\n",(0,o.jsxs)(e.p,{children:["In ",(0,o.jsx)(e.code,{children:"Lib/zoneinfo/_zoneinfo.py"}),", we can see that:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from datetime import datetime, timedelta, tzinfo\n...\nclass ZoneInfo(tzinfo):\n...\n"})}),"\n",(0,o.jsxs)(e.p,{children:["In ",(0,o.jsx)(e.code,{children:"Modules/_datetimemodule.c"}),", we find the PyDateTime_TZInfo implementation.. Line 3898:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-c",children:'static PyTypeObject PyDateTime_TZInfoType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    "datetime.tzinfo",\n    ...\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Now in ",(0,o.jsx)(e.code,{children:"script.py"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import zoneinfo\nimport datetime\ndt = datetime.datetime(2024, 3, 12, 0, 0, 0, 0)\nz = zoneinfo.ZoneInfo("UTC")\nz.utcoffset(dt)\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Run ",(0,o.jsx)(e.code,{children:"python -m trace --trace temp.py | grep -E 'modulename:|temp.py' | awk '/temp.py/ {printf \"\\033[0;31m%s\\033[0m\\n\", $0; next} {print}'"})," to trace function calls with the lines in temp.py marked red for easy visual inspection."]}),"\n",(0,o.jsxs)(e.p,{children:["Or simply ",(0,o.jsx)(e.code,{children:"python -m trace --trace temp.py | awk '/temp.py/ {printf \"\\033[0;31m%s\\033[0m\\n\", $0; next} {print}'"})," to see which specific lines of code are executed."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:'<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): temp.py(2): import datetime\ntemp.py(3): dt = datetime.datetime(2024, 3, 12, 0, 0, 0, 0)\ntemp.py(4): z = zoneinfo.ZoneInfo("UTC")\n --- modulename: weakref, funcname: get\n --- modulename: _tzpath, funcname: find_tzfile\n --- modulename: _tzpath, funcname: _validate_tzfile_path\n --- modulename: posixpath, funcname: isabs\n --- modulename: posixpath, funcname: _get_sep\n --- modulename: posixpath, funcname: normpath\n --- modulename: posixpath, funcname: join\n --- modulename: posixpath, funcname: _get_sep\n --- modulename: posixpath, funcname: normpath\n --- modulename: posixpath, funcname: join\n --- modulename: posixpath, funcname: _get_sep\n --- modulename: genericpath, funcname: isfile\n --- modulename: _common, funcname: load_data\n --- modulename: _common, funcname: from_file\n --- modulename: _common, funcname: __init__\n --- modulename: _common, funcname: from_file\n --- modulename: _common, funcname: __init__\n --- modulename: _common, funcname: <genexpr>\n --- modulename: _common, funcname: <genexpr>\n --- modulename: _common, funcname: <genexpr>\n --- modulename: _common, funcname: get_abbr\n --- modulename: _common, funcname: <genexpr>\n --- modulename: weakref, funcname: setdefault\n --- modulename: weakref, funcname: __new__\n --- modulename: weakref, funcname: __init__\ntemp.py(5): z.utcoffset(dt)\n'})}),"\n",(0,o.jsx)(e.p,{children:"We can see the function call stack, but one problem is that python built-in methods are not shown here. For example, we are supposed to at least see utcoffset() in the call stack, while actually it is not present in the printed lines."}),"\n",(0,o.jsx)(e.p,{children:"I circumvented this by making a custom copy of _zoneinfo.py:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Lib/zoneinfo/\n├── _common.py\n├── custom_zoneinfo.py (a copy of _zoneinfo.py)\n├── __init__.py\n├── __pycache__\n├── _tzpath.py\n└── _zoneinfo.py\n"})}),"\n",(0,o.jsx)(e.p,{children:"and added some print statements in custom_zoneinfo.py for debugging, like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'class ZoneInfo(tzinfo):\n    # ...\n    def _load_file(self, fobj):\n        # Retrieve all the data as it exists in the zoneinfo file\n        print("----- _load_file start -----")\n        print(fobj)\n        trans_idx, trans_utc, utcoff, isdst, abbr, tz_str = _common.load_data(\n            fobj\n        )\n        print("trans_idx", trans_idx)\n        print("trans_utc", trans_utc)\n        print("utcoff", utcoff)\n        print("isdst", isdst)\n        print("abbr", abbr)\n        print("tz_str", tz_str)\n        print("----- _load_file end -----")\n    # ...\n'})}),"\n",(0,o.jsx)(e.p,{children:"The file structure:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"cpython\n├── aclocal.m4\n├── _bootstrap_python\n├── build\n├── config.guess\n├── config.log\n├── config.status\n├── config.sub\n├── configure\n├── configure.ac\n├── Doc\n├── Dockerfile  (the dockerfile)\n├── Grammar\n├── Include\n├── install-sh\n├── iOS\n├── Lib\n├── libpython3.13d.a\n├── LICENSE\n├── Mac\n├── Makefile\n├── Makefile.pre\n├── Makefile.pre.in\n├── Misc\n├── Modules\n├── Objects\n├── Parser\n├── PC\n├── PCbuild\n├── platform\n├── Programs\n├── pybuilddir.txt\n├── pyconfig.h\n├── pyconfig.h.in\n├── python\n├── Python\n├── python-config\n├── python-config.py\n├── python-gdb.py\n├── README.rst\n├── script.py   (the debug script)\n└── Tools\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Dockerfile:\nnote that even though ",(0,o.jsx)(e.code,{children:"python:3.10-slim"})," is used as the base image, the script is executed by the customized python interpreter built inside the image."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:'FROM python:3.10-slim\nRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nCOPY . .\n\nCMD ["sh", "-c", "./python script.py"]\n'})}),"\n",(0,o.jsx)(e.p,{children:"script.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from zoneinfo.custom_zoneinfo import ZoneInfo\nimport datetime\n\ndt = datetime.datetime(2024, 3, 12, 0, 0, 0, 0)\nz1 = ZoneInfo("UTC")\nz2 = ZoneInfo("Asia/Shanghai")\n\nprint("========== UTC ==========")\nprint(z1.utcoffset(dt))\n\nprint("===== Asia/Shanghai =====")\nprint(z2.utcoffset(dt))\n'})}),"\n",(0,o.jsx)(e.p,{children:"Here is the output I get from building and running the docker container:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"========== UTC ==========\n>>> _load_file called from _new_instance() <<<\n----- _load_file start -----\n<_io.BufferedReader name='/usr/share/zoneinfo/UTC'>\ntrans_idx (2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2)\ntrans_utc (-2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600)\nutcoff (29143, 32400, 28800)\nisdst (0, 1, 0)\nabbr ('LMT', 'CDT', 'CST')\ntz_str b'CST-8'\n----- _load_file end -----\ndstoff [0, 3600, 0]\ntrans_local [[-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000], [-2177453143, -1600646400, -1585875600, -933638400, -922064400, -908841600, -888800400, -881020800, -767840400, -745804800, -733798800, -716860800, -699584400, -683856000, -670640400, -652320000, -649990800, 515556000, 527043600, 545191200, 558493200, 577245600, 589942800, 608695200, 621997200, 640144800, 653446800, 671594400, 684896400]]\n_ttinfo_list [_ttinfo(8:05:43, 0:00:00, LMT), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\nts 1710201600\nlt [-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000]\nnum_trans 29\ntti_before _ttinfo(8:05:43, 0:00:00, LMT)\ntti_before _ttinfo(8:00:00, 0:00:00, CST)\nttinfos [_ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\n8:00:00\n===== Asia/Shanghai =====\n>>> _load_file called from _new_instance() <<<\n----- _load_file start -----\n<_io.BufferedReader name='/usr/share/zoneinfo/Asia/Shanghai'>\ntrans_idx (2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2)\ntrans_utc (-2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600)\nutcoff (29143, 32400, 28800)\nisdst (0, 1, 0)\nabbr ('LMT', 'CDT', 'CST')\ntz_str b'CST-8'\n----- _load_file end -----\ndstoff [0, 3600, 0]\ntrans_local [[-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000], [-2177453143, -1600646400, -1585875600, -933638400, -922064400, -908841600, -888800400, -881020800, -767840400, -745804800, -733798800, -716860800, -699584400, -683856000, -670640400, -652320000, -649990800, 515556000, 527043600, 545191200, 558493200, 577245600, 589942800, 608695200, 621997200, 640144800, 653446800, 671594400, 684896400]]\n_ttinfo_list [_ttinfo(8:05:43, 0:00:00, LMT), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\nts 1710201600\nlt [-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000]\nnum_trans 29\ntti_before _ttinfo(8:05:43, 0:00:00, LMT)\ntti_before _ttinfo(8:00:00, 0:00:00, CST)\nttinfos [_ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\n8:00:00\n"})}),"\n",(0,o.jsx)(e.p,{children:"compared to the output from running script.py from local terminal:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"========== UTC ==========\n>>> _load_file called from _new_instance() <<<\n----- _load_file start -----\n<_io.BufferedReader name='/usr/share/zoneinfo/UTC'>\ntrans_idx ()\ntrans_utc ()\nutcoff (0,)\nisdst (0,)\nabbr ('UTC',)\ntz_str b'UTC0'\n----- _load_file end -----\ndstoff [0]\ntrans_local [[], []]\n_ttinfo_list [_ttinfo(0:00:00, 0:00:00, UTC)]\nts 1710201600\nlt []\nnum_trans 0\ntti_before _ttinfo(0:00:00, 0:00:00, UTC)\ntti_before _ttinfo(0:00:00, 0:00:00, UTC)\nttinfos []\n0:00:00\n===== Asia/Shanghai =====\n>>> _load_file called from _new_instance() <<<\n----- _load_file start -----\n<_io.BufferedReader name='/usr/share/zoneinfo/Asia/Shanghai'>\ntrans_idx (2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2)\ntrans_utc (-2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600)\nutcoff (29143, 32400, 28800)\nisdst (0, 1, 0)\nabbr ('LMT', 'CDT', 'CST')\ntz_str b'CST-8'\n----- _load_file end -----\ndstoff [0, 3600, 0]\ntrans_local [[-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000], [-2177453143, -1600646400, -1585875600, -933638400, -922064400, -908841600, -888800400, -881020800, -767840400, -745804800, -733798800, -716860800, -699584400, -683856000, -670640400, -652320000, -649990800, 515556000, 527043600, 545191200, 558493200, 577245600, 589942800, 608695200, 621997200, 640144800, 653446800, 671594400, 684896400]]\n_ttinfo_list [_ttinfo(8:05:43, 0:00:00, LMT), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\nts 1710201600\nlt [-2177452800, -1600642800, -1585872000, -933634800, -922060800, -908838000, -888796800, -881017200, -767836800, -745801200, -733795200, -716857200, -699580800, -683852400, -670636800, -652316400, -649987200, 515559600, 527047200, 545194800, 558496800, 577249200, 589946400, 608698800, 622000800, 640148400, 653450400, 671598000, 684900000]\nnum_trans 29\ntti_before _ttinfo(8:05:43, 0:00:00, LMT)\ntti_before _ttinfo(8:00:00, 0:00:00, CST)\nttinfos [_ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST), _ttinfo(9:00:00, 1:00:00, CDT), _ttinfo(8:00:00, 0:00:00, CST)]\n8:00:00\n"})}),"\n",(0,o.jsx)(e.p,{children:"We can see that loading /usr/share/zoneinfo/UTC gave different results in the docker container compared to local terminal. This is really weird.\n/usr/share/zoneinfo/UTC is part of the time zone database on Unix-like operating systems, thus it should be the same for both the docker container and my linux machine. I went ahead to compare the binary files:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:'# comp.sh\necho "$1"\necho "$2"\nif diff "$1" "$2" >/dev/null; then\n    echo "same"\nelse\n    echo "differ"\nfi\n'})}),"\n",(0,o.jsx)(e.p,{children:"On local terminal, they are different, which is expected:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"/usr/share/zoneinfo/Asia/Shanghai\n/usr/share/zoneinfo/UTC\ndiffer\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-Dockerfile",children:'FROM python:3.10-slim\nRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\nCOPY . .\nCMD ["sh", "-c", "./comp.sh /usr/share/zoneinfo/Asia/Shanghai /usr/share/zoneinfo/UTC"]\n'})}),"\n",(0,o.jsx)(e.p,{children:"And the output confirmed that these two files are the same!"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"/usr/share/zoneinfo/Asia/Shanghai\n/usr/share/zoneinfo/UTC\nsame\n"})}),"\n",(0,o.jsx)(e.p,{children:"So now, I finally identified what is causing the problem. But why would these two files be the same in the docker container?"}),"\n",(0,o.jsx)(e.h1,{children:"Experiment"}),"\n",(0,o.jsx)(e.p,{children:"We have three set of files:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Actual zoneinfo"}),": timezone binary files containing info corresponding to each time zone. I got these standard files from my local Linux system and built them into the Docker image for reference."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Container zoneinfo"}),": timezone binary files stored in ",(0,o.jsx)(e.code,{children:"/usr/share/zoneinfo"})," in the container."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"System localtime"}),": /etc/localtime, the binary file used for system timezone configuration in the container."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Three time zones are involved in this experiment: an unrelated timezone (Toronto) as a blank control, the timezone Shanghai corresponding to the copied file, and the affected timezone UTC which seems to have gone wrong."}),"\n",(0,o.jsxs)(e.p,{children:["In the control group, we have ",(0,o.jsx)(e.code,{children:"Dockerfile_nocp"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'FROM python:3.10-slim\n\nCOPY . .\nCMD ["sh", "-c", "\\\ncat /etc/timezone && \\\n./comp.sh /usr/share/zoneinfo/America/Toronto ./referenceToronto && \\\n./comp.sh /usr/share/zoneinfo/Asia/Shanghai ./referenceShanghai && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceShanghai && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceUTC && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceToronto && \\\n./comp.sh /etc/localtime ./referenceShanghai && \\\n./comp.sh /etc/localtime ./referenceUTC && \\\n./comp.sh /etc/localtime ./referenceToronto"]\n'})}),"\n",(0,o.jsx)(e.p,{children:"Build and run:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"docker build -f Dockerfile_nocp -t control .\ndocker run control\n"})}),"\n",(0,o.jsx)(e.p,{children:"Output:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Etc/UTC\n/usr/share/zoneinfo/America/Toronto\n./referenceToronto\nsame                                    // Toronto zoneinfo: Unaffected (expected)\n/usr/share/zoneinfo/Asia/Shanghai\n./referenceShanghai\nsame                                    // Shanghai zoneinfo: Unaffected (expected)\n/usr/share/zoneinfo/UTC\n./referenceShanghai\ndiffer                                  \n/usr/share/zoneinfo/UTC\n./referenceUTC\nsame                                    // UTC zoneinfo: Unaffected (expected)\n/usr/share/zoneinfo/UTC\n./referenceToronto\ndiffer\n/etc/localtime\n./referenceShanghai\ndiffer\n/etc/localtime\n./referenceUTC\nsame                   // system config now uses the correct UTC binary file (expected)\n/etc/localtime\n./referenceToronto\ndiffer\n"})}),"\n",(0,o.jsxs)(e.p,{children:["In ",(0,o.jsx)(e.code,{children:"Dockerfile_cp"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'FROM python:3.10-slim\nRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\nCOPY . .\nCMD ["sh", "-c", "\\\ncat /etc/timezone && \\\n./comp.sh /usr/share/zoneinfo/America/Toronto ./referenceToronto && \\\n./comp.sh /usr/share/zoneinfo/Asia/Shanghai ./referenceShanghai && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceShanghai && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceUTC && \\\n./comp.sh /usr/share/zoneinfo/UTC ./referenceToronto && \\\n./comp.sh /etc/localtime ./referenceShanghai && \\\n./comp.sh /etc/localtime ./referenceUTC && \\\n./comp.sh /etc/localtime ./referenceToronto"]\n'})}),"\n",(0,o.jsx)(e.p,{children:"Build and run, output:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Etc/UTC\n/usr/share/zoneinfo/America/Toronto\n./referenceToronto\nsame                                    // Toronto zoneinfo: Unaffected (expected)\n/usr/share/zoneinfo/Asia/Shanghai\n./referenceShanghai\nsame                                    // Shanghai zoneinfo: Unaffected (expected)\n/usr/share/zoneinfo/UTC\n./referenceShanghai\nsame                 // UTC zoneinfo: now actually becomes the Shanghai binary file (wrong)\n/usr/share/zoneinfo/UTC\n./referenceUTC\ndiffer\n/usr/share/zoneinfo/UTC\n./referenceToronto\ndiffer\n/etc/localtime\n./referenceShanghai\nsame                 // system config now uses the correct Shanghai binary file (expected)\n/etc/localtime\n./referenceUTC\ndiffer\n/etc/localtime\n./referenceToronto\ndiffer\n"})}),"\n",(0,o.jsx)(e.h1,{children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"After copying, /etc/localtime becomes the Shanghai standard binary file, but /usr/share/zoneinfo/UTC gets changes to the Shanghai binary file too, as a side effect, which caused the issue of wrong utcoffset."})]})}let c=i.renderToString((0,o.jsx)(function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(s,{...n})}):s(n)},{})),f={title:"Investigating a timezone configuring issue in Docker",date:"2024-03-22",tags:["Linux","Docker"],description:"Documenting my investigation of a timezone issue: \n    'RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime' causing \n    incorrect results of utcoffset."};function l(){return(0,o.jsx)(r.Z,{blogInfo:f,htmlString:c})}}},function(n){n.O(0,[774,644,888,179],function(){return n(n.s=2748)}),_N_E=n.O()}]);